/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: test_c.proto */

#ifndef PROTOBUF_C_test_5fc_2eproto__INCLUDED
#define PROTOBUF_C_test_5fc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _TestC__HelloRequest TestC__HelloRequest;
typedef struct _TestC__HelloReply TestC__HelloReply;


/* --- enums --- */


/* --- messages --- */

struct  _TestC__HelloRequest
{
  ProtobufCMessage base;
  char *name;
};
#define TEST_C__HELLO_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test_c__hello_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _TestC__HelloReply
{
  ProtobufCMessage base;
  char *message;
};
#define TEST_C__HELLO_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test_c__hello_reply__descriptor) \
    , (char *)protobuf_c_empty_string }


/* TestC__HelloRequest methods */
void   test_c__hello_request__init
                     (TestC__HelloRequest         *message);
size_t test_c__hello_request__get_packed_size
                     (const TestC__HelloRequest   *message);
size_t test_c__hello_request__pack
                     (const TestC__HelloRequest   *message,
                      uint8_t             *out);
size_t test_c__hello_request__pack_to_buffer
                     (const TestC__HelloRequest   *message,
                      ProtobufCBuffer     *buffer);
TestC__HelloRequest *
       test_c__hello_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test_c__hello_request__free_unpacked
                     (TestC__HelloRequest *message,
                      ProtobufCAllocator *allocator);
/* TestC__HelloReply methods */
void   test_c__hello_reply__init
                     (TestC__HelloReply         *message);
size_t test_c__hello_reply__get_packed_size
                     (const TestC__HelloReply   *message);
size_t test_c__hello_reply__pack
                     (const TestC__HelloReply   *message,
                      uint8_t             *out);
size_t test_c__hello_reply__pack_to_buffer
                     (const TestC__HelloReply   *message,
                      ProtobufCBuffer     *buffer);
TestC__HelloReply *
       test_c__hello_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test_c__hello_reply__free_unpacked
                     (TestC__HelloReply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TestC__HelloRequest_Closure)
                 (const TestC__HelloRequest *message,
                  void *closure_data);
typedef void (*TestC__HelloReply_Closure)
                 (const TestC__HelloReply *message,
                  void *closure_data);

/* --- services --- */

typedef struct _TestC__Greeter_Service TestC__Greeter_Service;
struct _TestC__Greeter_Service
{
  ProtobufCService base;
  void (*my_test_first)(TestC__Greeter_Service *service,
                        const TestC__HelloRequest *input,
                        TestC__HelloReply_Closure closure,
                        void *closure_data);
};
typedef void (*TestC__Greeter_ServiceDestroy)(TestC__Greeter_Service *);
void test_c__greeter__init (TestC__Greeter_Service *service,
                            TestC__Greeter_ServiceDestroy destroy);
#define TEST_C__GREETER__BASE_INIT \
    { &test_c__greeter__descriptor, protobuf_c_service_invoke_internal, NULL }
#define TEST_C__GREETER__INIT(function_prefix__) \
    { TEST_C__GREETER__BASE_INIT,\
      function_prefix__ ## my_test_first  }
void test_c__greeter__my_test_first(ProtobufCService *service,
                                    const TestC__HelloRequest *input,
                                    TestC__HelloReply_Closure closure,
                                    void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor test_c__hello_request__descriptor;
extern const ProtobufCMessageDescriptor test_c__hello_reply__descriptor;
extern const ProtobufCServiceDescriptor test_c__greeter__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_test_5fc_2eproto__INCLUDED */
